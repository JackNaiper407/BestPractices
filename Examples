import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ReactiveFormsModule } from '@angular/forms';
import { EnrollmentSettingsComponent } from './enrollment-settings.component';
import { SharedModule } from '../../../../shared/shared.module';
import { By } from '@angular/platform-browser';

describe('EnrollmentSettingsComponent', () => {
  let component: EnrollmentSettingsComponent;
  let fixture: ComponentFixture<EnrollmentSettingsComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [EnrollmentSettingsComponent],
      imports: [ReactiveFormsModule, SharedModule],
    }).compileComponents();

    fixture = TestBed.createComponent(EnrollmentSettingsComponent);
    component = fixture.componentInstance;

    // Mock initial data
    component.formularyTypeOptions = [{ value: 'A', description: 'Option A' }];
    component.billingTypeOptions = [{ value: 'B', description: 'Option B' }];
    component.orderTypeOptions = [{ value: 'C', description: 'Option C' }];
    component.contractEndActionOptions = [{ value: 'D', description: 'Option D' }];
    component.customerEnrollmentSettForm = new FormGroup({}); // Replace with the actual form initialization
    fixture.detectChanges();
  });

  it('should create the component', () => {
    expect(component).toBeTruthy();
  });

  it('should render the form with all controls', () => {
    const formElement = fixture.debugElement.query(By.css('form'));
    expect(formElement).toBeTruthy();

    const inputElements = formElement.queryAll(By.css('input, app-dropdown, app-checkbox-group, app-date-picker'));
    expect(inputElements.length).toBeGreaterThan(0); // Ensure form controls are rendered
  });

  it('should disable the "Save and continue" button if the form is invalid', () => {
    component.customerEnrollmentSettForm.markAsTouched();
    component.customerEnrollmentSettForm.setErrors({ invalid: true });
    fixture.detectChanges();

    const saveButton = fixture.debugElement.query(By.css('button[type="submit"]')).nativeElement;
    expect(saveButton.disabled).toBeTrue();
  });

  it('should call saveEnrollmentSettingsClicked on "Save and continue" button click', () => {
    spyOn(component, 'saveEnrollmentSettingsClicked');
    const saveButton = fixture.debugElement.query(By.css('button[type="submit"]')).nativeElement;

    saveButton.click();
    expect(component.saveEnrollmentSettingsClicked).toHaveBeenCalled();
  });

  it('should emit the onSelectionChange event for formulary type', () => {
    spyOn(component, 'onFormularySelectionChanged');
    const multichoiceDropdown = fixture.debugElement.query(By.css('app-multichoice-dropdown'));
    multichoiceDropdown.triggerEventHandler('onSelectionChange', 'testValue');

    expect(component.onFormularySelectionChanged).toHaveBeenCalledWith('testValue');
  });

  it('should save enrollment settings on form submit', () => {
    spyOn(component, 'saveEnrollmentSettings');
    component.customerEnrollmentSettForm.setErrors(null); // Valid form
    fixture.detectChanges();

    const formElement = fixture.debugElement.query(By.css('form')).nativeElement;
    formElement.submit();
    expect(component.saveEnrollmentSettings).toHaveBeenCalled();
  });

  it('should call saveProgressEnrollmentSettings when save progress button is clicked', () => {
    spyOn(component, 'saveProgressEnrollmentSettings');
    const saveProgressButton = fixture.debugElement.queryAll(By.css('button'))[1].nativeElement; // Assuming it's the second button
    saveProgressButton.click();
    expect(component.saveProgressEnrollmentSettings).toHaveBeenCalled();
  });

  it('should validate date filter correctly', () => {
    const validDate = new Date();
    const invalidDate = new Date(1999, 1, 1);
    expect(component.dateFilter(validDate)).toBeTrue();
    expect(component.dateFilter(invalidDate)).toBeFalse();
  });
});

