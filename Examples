import { Component, OnInit, ChangeDetectorRef } from '@angular/core';
import { forkJoin, of } from 'rxjs';
import { switchMap, catchError } from 'rxjs/operators';
import { CustomerEnrollmentService } from './customer-enrollment.service';
import { CustomerEnrollmentData } from './models/customer-enrollment-data.model';
import { ProgramData } from './models/program-data.model';

@Component({
  selector: 'app-enrollment',
  templateUrl: './enrollment.component.html',
})
export class EnrollmentComponent implements OnInit {
  enrollmentId!: number;
  programId!: number;
  customerEnrollmentData!: CustomerEnrollmentData;
  programData!: ProgramData;
  orderTypesLookUp: any[] = [];
  subscriptions: any = { sink: null };

  constructor(
    private customerEnrollmentService: CustomerEnrollmentService,
    private cdr: ChangeDetectorRef
  ) {}

  ngOnInit(): void {
    this.loadProgramData()
      .pipe(
        switchMap(() => {
          // Call loadEnrollmentData only when enrollmentId > 0
          if (this.enrollmentId > 0) {
            return this.loadEnrollmentData();
          }
          return of(null); // Skip if condition fails
        })
      )
      .subscribe({
        next: () => {
          console.log('Program data and optional enrollment data loaded successfully');
        },
        error: (err) => {
          console.error('Error occurred while loading data:', err);
        }
      });
  }

  private loadProgramData() {
    this.programResponse = this.customerEnrollmentService.getProgramDataById(this.programId ?? 0);
    this.orderTypeResponse = this.customerEnrollmentService.getOrderTypesLookUpList();

    return forkJoin([this.programResponse, this.orderTypeResponse]).pipe(
      catchError((err) => {
        console.error('Error fetching program data:', err);
        return of(null);
      }),
      switchMap(([programDataResult, orderTypesResult]) => {
        if (programDataResult?.value?.length && orderTypesResult?.value?.length) {
          const programData: ProgramData = new ProgramData();
          programData.programOrderTypes = programDataResult?.value[0]?.programOrderTypes;
          programData.programFormularies = programDataResult?.value[0]?.programFormularies;
          programData.startDate = new Date(programDataResult?.value[0]?.startDate);
          programData.endDate = new Date(programDataResult?.value[0]?.endDate);
          this.programData = programData;

          // Map order types
          this.orderTypesLookUp = orderTypesResult.value.map(({ orderTypeCode, orderTypeName }: any) => ({
            value: orderTypeCode,
            description: orderTypeName,
          }));

          this.cdr.detectChanges();
        }
        return of(true); // Indicate completion
      })
    );
  }

  private loadEnrollmentData() {
    return this.customerEnrollmentService.getEnrollmentById(this.enrollmentId).pipe(
      catchError((err) => {
        console.error('Error fetching enrollment data:', err);
        return of(null);
      }),
      switchMap((enrollmentDataResult) => {
        if (enrollmentDataResult?.value?.length) {
          const enrollmentData: CustomerEnrollmentData = new CustomerEnrollmentData();
          enrollmentData.customerId = enrollmentDataResult.value[0]?.customerId;
          this.customerEnrollmentData = enrollmentData;
          this.cdr.detectChanges();
        }
        return of(true); // Indicate completion
      })
    );
  }
}
