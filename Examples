import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { CustomerEnrollmentData } from '../../model/customer-enrollment-data.model';
import { CustomerEnrollmentSettings } from '../../model/customer-enrollment-settings.model';
import { DataOption } from '../../../../shared/models/data-option.model';
import { ProgramData } from '../../../program/model/program-data.model';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-enrollment-settings',
  templateUrl: './enrollment-settings.component.html',
  changeDetection: ChangeDetectionStrategy.Default,
  standalone: true,
  imports: [SharedModule],
})
export class EnrollmentSettingsComponent implements OnInit {
  @Input() customerEnrollmentSettForm!: FormGroup<EnrollmentSettingForm>;
  @Input() billingTypeLookUp = new Array<DataOption>();
  @Input() contractEndActionLookUp = new Array<DataOption>();
  @Input() orderTypesLookUp = new Array<DataOption>();

  @Input() set programDataInput(value: ProgramData) {
    if (value) {
      this.setProgramMasterData(value);
    }
  }

  formularyTypeOptions: DataOption[] = [];
  orderTypes: DataOption[] = [];
  selectAll: boolean = false;
  listOfCustomFormulary: DataOption[] = [
    { value: 'CF', description: 'Custom formulary' },
  ];
  programStartDate!: Date;
  programEndDate!: Date;
  CustomerCommitLeadTime!: number;

  contractStartDateWarning: string | null = null;
  contractEndDateWarning: string | null = null;

  private subscriptions: Subscription = new Subscription();

  ngOnInit(): void {
    // Subscribe to Contract Start Date value changes
    this.subscriptions.add(
      this.customerEnrollmentSettForm.controls.contractStartDate.valueChanges.subscribe(
        (selectedDate: Date) => this.validateContractStartDate(selectedDate)
      )
    );

    // Subscribe to Contract End Date value changes
    this.subscriptions.add(
      this.customerEnrollmentSettForm.controls.contractEndDate.valueChanges.subscribe(
        (selectedDate: Date) => this.validateContractEndDate(selectedDate)
      )
    );
  }

  private validateContractStartDate(selectedDate: Date): void {
    this.contractStartDateWarning = null; // Reset warning message

    const today = new Date();
    today.setHours(0, 0, 0, 0); // Normalize today's date
    const normalizedSelectedDate = new Date(selectedDate);
    normalizedSelectedDate.setHours(0, 0, 0, 0); // Normalize selected date

    if (normalizedSelectedDate < today || normalizedSelectedDate > this.programEndDate) {
      this.contractStartDateWarning =
        'The selected date must be between today and the program end date.';
      return;
    }

    const daysDifference = Math.ceil(
      (normalizedSelectedDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)
    );

    if (daysDifference <= this.CustomerCommitLeadTime) {
      this.contractStartDateWarning = `The selected date must be at least ${
        this.CustomerCommitLeadTime + 1
      } days from today.`;
    }
  }

  private validateContractEndDate(selectedDate: Date): void {
    this.contractEndDateWarning = null; // Reset warning message

    const contractStartDate = this.customerEnrollmentSettForm.controls.contractStartDate.value;
    const normalizedContractStartDate = new Date(contractStartDate);
    normalizedContractStartDate.setHours(0, 0, 0, 0); // Normalize contract start date

    const normalizedSelectedDate = new Date(selectedDate);
    normalizedSelectedDate.setHours(0, 0, 0, 0); // Normalize selected date

    if (
      normalizedSelectedDate < normalizedContractStartDate ||
      normalizedSelectedDate > this.programEndDate
    ) {
      this.contractEndDateWarning =
        'The selected date must be between the contract start date and the program end date.';
    }
  }

  private setProgramMasterData(programData: ProgramData): void {
    this.programEndDate = programData.endDate; // Assuming this is already part of ProgramData
    this.CustomerCommitLeadTime = programData.customerCommitLeadTime;
  }

  ngOnDestroy(): void {
    this.subscriptions.unsubscribe();
  }
}
